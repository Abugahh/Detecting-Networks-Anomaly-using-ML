rf = joblib.load('rf_model.pkl')



# path to my JSON file
json_file_path = 'validation.json' 

data = []

with open(json_file_path, 'r') as f:
    for line in f:
        data.append(json.loads(line))


# Select the 10 features in the same order as the training data
features = ['state', 'dbytes', 'rate', 'sttl', 'sload', 'dload', 'dinpkt', 'tcprtt', 'ackdat', 'ct_state_ttl']

all_packets = pd.DataFrame(columns=features + ['prediction'])



num_iterations = 4  # replace with the number of iterations you want

for _ in range(num_iterations):
    # Select a random packet
    packet = random.choice(data)

    # Select the 10 features from the packet
    selected_data = {feature: packet[feature] for feature in features}

    # Convert to DataFrame as the model expects input in this format
    df = pd.DataFrame([selected_data], columns=features)

    # Use the trained model to make predictions
    predictions = rf.predict(df)
    scores = rf.predict_proba(df)

    # Add the prediction to the DataFrame
    df['prediction'] = predictions[0]
    df['Probability score'] = scores.max(axis=1)[0]
    

    #     # Append the new packet to all_packets
    # all_packets = all_packets.append(df, ignore_index=True)
    # Append the new packet to all_packets
    all_packets = pd.concat([all_packets, df], ignore_index=True)



    # # Update the number of packets in the first column
    # with col1:
    #     st.metric(
    #         label="No of Packets",
    #         value=str(len(all_packets)),
    #     )

        # Update the metric in the placeholder
    metric_placeholder.metric(label="No of Packets ‚è≥", value=str(len(all_packets)))
    

        # Count the number of occurrences of each prediction
    prediction_counts = all_packets['prediction'].value_counts()
 table_placeholder.table(all_packets)
    time.sleep(5)
    
    # If an attack is predicted, show a toast notification in the Streamlit app
    if predictions[0] == 'Fuzzers, Analysis , Reconnaissance , DoS, Shellcode, Generic, Backdoors,Exploits,Worms':
        st.toast('Alert: An attack was predicted!', duration=30)

